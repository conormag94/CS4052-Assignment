#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 vertex_texture;

out vec3 LightIntensity;
out vec2 TexCoord;

// Light position in world coords.
vec4 LightPosition = vec4 (10.0, 10.0, 4.0, 1.0); 

vec3 Ls = vec3 (0.0, 1.0, 1.0); // white specular colour
vec3 Ld = vec3 (1.0, 1.0, 1.0); // Light source intensity
vec3 La = vec3 (0.2, 0.2, 0.2); // dark-grey ambient colour

vec3 Ks = vec3 (0.5, 0.5, 0.5); // fully reflect specular light
vec3 Kd = vec3 (0.8, 0.8, 0.8); // green-blue diffuse surface reflectance
vec3 Ka = vec3 (0.5, 0.5, 0.5); // reflect some ambient light

float specular_power = 20.0;


uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

void main(){

	// ambient intensity -----------------------------
	vec3 Ia = La * Ka;

	
	// diffuse intensity -----------------------------
	vec3 light_position_eye = vec3 (view * LightPosition);

	mat4 ModelViewMatrix = view * model;
    mat3 NormalMatrix =  mat3(ModelViewMatrix);

    // Convert normal and position to eye coords
    // Normal in view space
    vec3 tnorm = normalize( NormalMatrix * vertex_normal);

    // Position in view space
    vec4 eyeCoords = ModelViewMatrix * vec4(vertex_position,1.0);
	vec3 position_eye = vec3 (eyeCoords);

	vec3 L = normalize (light_position_eye - position_eye);
	float dot_prod = max(dot (L, tnorm), 0.0);
	vec3 Id = Ld * Kd * dot_prod; // final diffuse intensity
	
	
	// specular intensity ----------------------------
	vec3 R = reflect (-L, tnorm);	vec3 V = normalize (-position_eye);
	float dot_prod_specular = max(dot (R, V), 0.0);	float specular_factor = pow (dot_prod_specular, specular_power);
	vec3 Is = Ls * Ks * specular_factor; // final specular intensity
	
	
	// final colour ----------------------------------
	LightIntensity = vec3 (Is + Id + Ia);
	// Flip the y coord because it starts in the bottom left corner instead of top left
	TexCoord = vec2 (vertex_texture.x, 1 - vertex_texture.y);
  
    // Convert position to clip coordinates and pass along
    gl_Position = proj * view * model * vec4(vertex_position,1.0);
}


  